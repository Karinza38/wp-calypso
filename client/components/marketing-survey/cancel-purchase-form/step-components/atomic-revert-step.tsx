import { isPlan } from '@automattic/calypso-products';
import { CheckboxControl, Button as GutenbergButton, ToggleControl } from '@wordpress/components';
import clsx from 'clsx';
import { useTranslate } from 'i18n-calypso';
import moment from 'moment';
import FormattedHeader from 'calypso/components/formatted-header';
import InfoPopover from 'calypso/components/info-popover';

import './atomic-revert-step.style.scss';

export type Props = {
	atomicTransfer: any;
	purchase: any;
	site: any;
	atomicRevertCheckOne: boolean;
	onClickCheckOne: ( isChecked: boolean ) => void;
	atomicRevertCheckTwo: boolean;
	onClickCheckTwo: ( isChecked: boolean ) => void;
	hasBackupsFeature: boolean;
	isRemovePlan?: boolean;
	isDowngradePlan?: boolean;
	enableLosslessRevert?: boolean;
	setEnableLosslessRevert?: ( isChecked: boolean ) => void;
	action: 'cancel-purchase' | 'downgrade-plan';
};

export function AtomicRevertStep( props: Props ) {
	const {
		atomicTransfer,
		purchase,
		site,
		atomicRevertCheckOne,
		atomicRevertCheckTwo,
		enableLosslessRevert,
		setEnableLosslessRevert,
		hasBackupsFeature,
		onClickCheckOne,
		onClickCheckTwo,
		isRemovePlan,
		isDowngradePlan,
		action = 'cancel-purchase',
	} = props;
	const translate = useTranslate();

	const atomicTransferDate = moment( atomicTransfer.created_at ).format( 'LL' );
	const isPlanPurchase = isPlan( purchase );
	const createInfoPopover = (
		<InfoPopover className={ `${ action }-form__atomic-revert-more-info` }>
			{ translate(
				'On %(atomicTransferDate)s, we automatically moved your site to a platform that supports the usage of plugins, custom themes, and hosting features. If you deactivate your plan, we will move your site back to its original platform.',
				{ args: { atomicTransferDate } }
			) }
		</InfoPopover>
	);

	let subHeaderText;
	if ( isPlanPurchase ) {
		if ( isRemovePlan ) {
			subHeaderText = translate(
				'If you deactivate your plan, we will set your site to private and revert it to the point when you installed your first plugin or custom theme, or activated hosting features on {{strong}}%(atomicTransferDate)s{{/strong}}. All of your posts, pages, and media will be preserved, except for content generated by plugins or custom themes. {{moreInfoTooltip/}}',
				{
					args: { atomicTransferDate },
					components: {
						moreInfoTooltip: createInfoPopover,
						strong: <strong className="is-highlighted" />,
					},
				}
			);
		} else if ( isDowngradePlan ) {
			subHeaderText = translate(
				'If you downgrade your plan, we will immediately set your site to private and revert it to the point when you installed your first plugin or custom theme, or activated hosting features on {{strong}}%(atomicTransferDate)s{{/strong}}.',
				{
					args: {
						atomicTransferDate,
					},
					components: {
						strong: <strong className="is-highlighted" />,
					},
				}
			);
		} else {
			subHeaderText = translate(
				'If you cancel your plan, when your plan expires on {{strong}}%(purchaseRenewalDate)s{{/strong}}, we will set your site to private and revert it to the point when you installed your first plugin or custom theme, or activated hosting features on {{strong}}%(atomicTransferDate)s{{/strong}}. All of your posts, pages, and media will be preserved, except for content generated by plugins or custom themes. {{moreInfoTooltip/}}',
				{
					args: {
						purchaseRenewalDate: moment( purchase.expiryDate ).format( 'LL' ),
						atomicTransferDate,
					},
					components: {
						moreInfoTooltip: createInfoPopover,
						strong: <strong className="is-highlighted" />,
					},
				}
			);
		}
	} else {
		subHeaderText = translate(
			'If you deactivate your product, we will set your site to private and revert it to the point when you installed your first plugin or custom theme, or activated hosting features on {{strong}}%(atomicTransferDate)s{{/strong}}. All of your posts, pages, and media will be preserved, except for content generated by plugins or custom themes. {{moreInfoTooltip/}}',
			{
				args: { atomicTransferDate },
				components: {
					moreInfoTooltip: createInfoPopover,
					strong: <strong className="is-highlighted" />,
				},
			}
		);
	}

	const enabledClassName = `${ action }-form__atomic-revert-checkbox-enabled`;

	const checkBox1ClassName = clsx( 'required-checkboxes', {
		[ enabledClassName ]: !! atomicRevertCheckOne,
	} );

	const checkBox2ClassName = clsx( 'required-checkboxes', {
		[ enabledClassName ]: !! atomicRevertCheckTwo,
	} );

	return (
		<div className={ `${ action }-form__atomic-revert` }>
			<FormattedHeader
				brandFont
				headerText={ translate( 'Proceed With Caution' ) }
				subHeaderText={ subHeaderText }
			/>
			<p>
				{ translate(
					'Please {{strong}}confirm and check{{/strong}} the following items before you continue with plan deactivation:',
					{ components: { strong: <strong /> } }
				) }
			</p>
			<CheckboxControl
				className={ checkBox1ClassName }
				label={
					isPlanPurchase && ! isRemovePlan && ! isDowngradePlan
						? ( translate(
								'Any themes/plugins you have installed on the site will be removed on %(purchaseRenewalDate)s, along with their data.',
								{
									args: {
										purchaseRenewalDate: moment( purchase.expiryDate ).format( 'LL' ),
									},
								}
						  ) as string )
						: ( translate(
								'Any themes/plugins you have installed on the site will be removed, along with their data.'
						  ) as string )
				}
				checked={ atomicRevertCheckOne }
				onChange={ onClickCheckOne }
			/>
			<CheckboxControl
				className={ checkBox2ClassName }
				label={
					isPlanPurchase && ! isRemovePlan && ! isDowngradePlan
						? ( translate(
								'On %(purchaseRenewalDate)s, your site will return to its original settings and theme right before the first plugin or custom theme was installed.',
								{
									args: {
										purchaseRenewalDate: moment( purchase.expiryDate ).format( 'LL' ),
									},
								}
						  ) as string )
						: ( translate(
								'Your site will return to its original settings and theme right before the first plugin or custom theme was installed.'
						  ) as string )
				}
				checked={ atomicRevertCheckTwo }
				onChange={ onClickCheckTwo }
			/>
			{ hasBackupsFeature && (
				<div className={ `${ action }-form__backups` }>
					<div>
						<h4>{ translate( 'Would you like to download the backup of your site?' ) }</h4>
						<p>
							{ translate(
								"To make sure you have everything after your plan is deactivated or if you'd like to migrate, you can download a backup."
							) }
						</p>
					</div>
					<GutenbergButton variant="primary" href={ `/backup/${ site.slug }` }>
						{ translate( 'Go to your backups' ) }
					</GutenbergButton>
				</div>
			) }
			{ isDowngradePlan && (
				<div className="downgrade-purchase-form__atomic-lossless-revert">
					<ToggleControl
						className={
							enableLosslessRevert ? `${ action }-form__atomic-revert-checkbox-enabled` : ''
						}
						label={ translate( 'Restore my posts, pages, and media.' ) }
						help={ translate(
							'Your posts, pages, and media added after upgrading will be automatically imported to your downgraded site. This process may take up to 24 hours.'
						) }
						checked={ enableLosslessRevert }
						onChange={ setEnableLosslessRevert! }
					/>
				</div>
			) }
		</div>
	);
}
